#!/usr/bin/env ruby

# Bundler dependencies
require 'rubygems'
require 'bundler/setup'

# Setup load path for application (makes you realise RubyGems spoils you...)
lib_path = File.expand_path(File.dirname(__FILE__)+ '/../lib')
# lib_path = File.expand_path(File.dirname(__FILE__)+ '/../samples')
$LOAD_PATH.unshift(lib_path) unless $LOAD_PATH.include?(lib_path)

require 'Logger'

LOGGER = Logger.new(STDOUT)
LOGGER.formatter = proc do |severity, time, progname, msg|
      severity_to_colour_map = {'DEBUG'=>'0;37', 'INFO'=>'32', 'WARN'=>'33', 'ERROR'=>'31', 'FATAL'=>'31', 'UNKNOWN'=>'37'}

      formatted_severity = sprintf("%-5s",severity)
      # formatted_time = time.strftime("%y-%m-%d %H:%M:%S.") << time.usec.to_s[0..2].rjust(3)
      formatted_time = time.strftime("%y-%m-%d %H:%M:%S")
      color = severity_to_colour_map[severity]

      #"\033[0;37m#{formatted_time}\033[0m [\033[#{color}m#{formatted_severity}\033[0m] #{msg.strip} (pid:#{$$})\n"
      "\033[0;37m#{formatted_time}\033[0m [\033[#{color}m#{formatted_severity}\033[0m] #{msg.strip}\n"
    end
# LOGGER.sev_threshold=(Logger::INFO)

require 'app'

binding.pry

# app = App.new



begin
  LOGGER.info("IBUS Framer")

  # framer.start
rescue StandardError => e
  LOGGER.error e.message
  e.backtrace.each {|e| LOGGER.error e }
  binding.pry
  exit
rescue Interrupt
  Signal.trap(0, proc { puts "Terminating: #{$$}" })
end
