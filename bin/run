#!/usr/bin/env ruby

# Bundler dependencies
require 'rubygems'
require 'bundler/setup'

require 'pry-byebug'

# Setup load path for application (makes you realise RubyGems spoils you...)
lib_path = File.expand_path(File.dirname(__FILE__)+ '/../lib')
# lib_path = File.expand_path(File.dirname(__FILE__)+ '/../samples')
$LOAD_PATH.unshift(lib_path) unless $LOAD_PATH.include?(lib_path)

# *************************************************************************** #
#                               ENGAGE THE LAZY!                              #
# *************************************************************************** #

require 'Logger'

LOGGER = Logger.new(STDOUT)
LOGGER.formatter = proc do |severity, time, progname, msg|
    severity_to_colour_map = {'DEBUG'=>'0;37', 'INFO'=>'32', 'WARN'=>'33', 'ERROR'=>'31', 'FATAL'=>'31', 'UNKNOWN'=>'37'}
    # severity_to_abrv_map = { 'DEBUG': 'D', 'INFO': 'I', 'WARN': 'W', 'ERROR': 'E', 'FATAL': 'F', 'UNKNOWN': '?'}
    color = severity_to_colour_map[severity]

    formatted_severity = sprintf("%-5s",severity)


    # formatted_time = time.strftime("%y-%m-%d %H:%M:%S.") << time.usec.to_s[0..2].rjust(3)
    # formatted_time = time.strftime("%y-%m-%d %H:%M:%S")
    formatted_time = time.strftime("%H:%M:%S")

    msg.strip! rescue StandardError

    #"\033[0;37m#{formatted_time}\033[0m [\033[#{color}m#{formatted_severity}\033[0m] #{msg.strip} (pid:#{$$})\n"
    m = "\033[0;37m#{formatted_time}\033[0m [\033[#{color}m#{formatted_severity}\033[0m] #{msg}"
    m.concat("\n") unless severity == Logger::UNKNOWN
  end

LOGGER.sev_threshold=(Logger::INFO)

# *************************************************************************** #
#                             DISENGAGE THE LAZY!                             #
# *************************************************************************** #

require 'app'

LOGGER.info("BMW I/K-BUS Interface")

begin
  app = App.new
  app.launch
rescue Interrupt
  Signal.trap(0, proc { puts "Terminating: #{$$}" })
  LOGGER.close
  return 1
rescue StandardError => e
  LOGGER.error e.message
  e.backtrace.each { |e| LOGGER.error e }
  binding.pry
  LOGGER.close
  return 1
end

return 0
