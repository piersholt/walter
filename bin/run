#!/usr/bin/env ruby

# *************************************************************************** #
#                                  LOAD PATHS                                 #
# *************************************************************************** #
begin
  # Bundler dependencies
  require 'rubygems'
  require 'bundler/setup'

  require 'pry-byebug'

  require 'observer'

  # Setup load path for application (makes you realise RubyGems spoils you...)
  lib_path = File.expand_path(File.dirname(__FILE__) + '/../lib')
  ext_path = File.expand_path(File.dirname(__FILE__) + '/../ext')
  $LOAD_PATH.unshift(lib_path) unless $LOAD_PATH.include?(lib_path)
  $LOAD_PATH.unshift(ext_path) unless $LOAD_PATH.include?(ext_path)

  require 'log_actually'
  LogActually.is_all_around(:interface)
  LogActually.interface.i
  LogActually.is_all_around(:datalink)
  LogActually.datalink.i
  LogActually.is_all_around(:multiplexer)
  LogActually.multiplexer.i
  LogActually.is_all_around(:demultiplexer)
  LogActually.demultiplexer.i
  LogActually.is_all_around(:transmitter)
  LogActually.transmitter.i
  LogActually.is_all_around(:virtual)
  LogActually.virtual.i
  LogActually.is_all_around(:parameterized)
  LogActually.parameterized.i

  LogActually.is_all_around(:cdc)
  LogActually.cdc.w

  LogActually.is_all_around(:rad)
  LogActually.rad.d
  LogActually.is_all_around(:gfx)
  LogActually.gfx.d

  LogActually.is_all_around(:display)
  LogActually.display.d

  LogActually.is_all_around(:messaging)
  LogActually.messaging.i

  LogActually.is_all_around(:wolfgang)
  LogActually.wolfgang.d

  LOGGER = LogActually.is_all_around(:default)
  LOGGER.i

  require 'helpers/manageable_threads'
  require 'yabber/yabber'
rescue LoadError => e
  LOGGER.error('run') { e }
  e.backtrace.each { |line| LOGGER.error('run') { line } }
  $LOAD_PATH.each { |line| LOGGER.info('run') { line } }
  exit
rescue StandardError => e
  LOGGER.error('run') { e }
  e.backtrace.each { |line| LOGGER.error('run') { line } }
  exit
end

# *************************************************************************** #
#                                 APPLICATION                                 #
# *************************************************************************** #

PROC = 'Walter'.freeze

LOGGER.info(PROC) { "BMW I/K-BUS Interface" }

begin
  require 'walter'
  app = Walter.new
  app.launch
rescue Interrupt
  Signal.trap(0, proc { puts "Terminating: #{$$}" })
  LOGGER.close
  return 1
rescue LoadError => e
  LOGGER.error('run') { 'Application LoadError' }
  LOGGER.error('run') { e }
  e.backtrace.each { |line| LOGGER.warn('run') { line } }
  # $LOAD_PATH.each { |line| LOGGER.warn('run') { line } }
  exit(false)
rescue StandardError => e
  LOGGER.error('run') { 'Rescued at bin/run' }
  LOGGER.error('run') { e }
  e.backtrace.each { |line| LOGGER.error('run') { line } }
  LOGGER.close
  exit(false)
rescue SystemExit
  puts "rescued a SystemExit exception"
end

return 0
